/*
==============================================================================
tinySynthOscillator.h - header file for tinySynthOscillator.cpp
Copyright (C) 2016 Aldo Ciaccini

Description:
This class implements the baseline oscillator belonging to the tinySynth synthesizer

==============================================================================
Copyright:
This module was inspired by the vstSynth project developed 
by Gabriel Olochwoszcz in 2012 under the terms of the GNU Public Lic. v.2.

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
==============================================================================
STK LICENSE:

STK WWW site: http://ccrma.stanford.edu/software/stk/

The Synthesis ToolKit in C++ (STK)
Copyright (c) 1995-2011 Perry R. Cook and Gary P. Scavone

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

Any person wishing to distribute modifications to the Software is
asked to send the modifications to the original developer so that they
can be incorporated into the canonical version.  This is, however, not
a binding provision of this license.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR
ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF
CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
==============================================================================
*/

#include "tinySynthStkIncludes.h"
#include "../JuceLibraryCode/JuceHeader.h"
#include "tinySynthLFO.h"

using namespace stk;
/** \class tinySynthOscillator
 *  \brief This class implements the baseline oscillator belonging to the tinySynth synthesizer
 *  \details The oscillator's output is produced as a function of: \n
 *  - oscillator parameters: waveform type, frequency, octave and gain \n 
 *  - LFO effects: vibrato and tremolo effects \n
 *  - ADSR modifications: attach, decay, release and sustain \n
 *  - Noise level \n <P>
 *  Three types of waveforms can be generated: Sine, Saw and Square.\n
 *  The Oscillator, Noise, and partially the LFO (only Sine) waveforms are derived by STK generator classes: \n
 *  - SineWave: this class computes and saves a static sine "table". Output values 
 *  			are generated by using linear interpolation.\n
 *  - BlitSaw: this class generates a band-limited sawtooth waveform\n
 *  - BlitSquare: this class generates a band-limited square wave signal\n
 *  - Noise: it generates random number using the C rand() function\n <P>
 *  Also ADSR audio modifications are based on the STK library.\n\n
 *  Differently, the Saw and Square waveforms of LFO are based on NaiveSaw and NaiveSquare wave provided by tinySynthLFO class\n
 */
class tinySynthOscillator
{
public:
    tinySynthOscillator();  /**< \brief class constructor*/  
    ~tinySynthOscillator(); /**< \brief class deconstructor*/  
    
 	void setFrequency(float newFrequency);  /**< \brief set oscillator Frequency */  
	float getFrequency(); /**< \brief return current oscillator Frequency */  
	
	void setOctave(int newOctave); /**< \brief set oscillator Octave */
    int getOctave(); /**< \brief return current oscillator Octave */  
	
	void setSemiTone(int newSemiTone); /**< \brief set oscillator semitone */
 
	void setGain(float newGain); /**< \brief set oscillator Gain */
	float getGain();/**< \brief return current oscillator Gain */  
	
	void setWaveform(int newWaveform); /**< \brief set oscillator Waveform type*/
	int getWaveform(); /**< \brief return current oscillator Waveform type*/  
 
    StkFloat tick(); /**< \brief return the oscillator's tick value according to its parameters*/  

	float singleSample(ADSR* envelope, float noiseGain, LFO* lfo); /**< \brief return a single  oscillator output according to : SAMPLE = ADSR * (NOISE + OSCILLATOR) * TREMOLO */

private:

	float currentSample;

	// Oscillator internal parameters
	float frequency;
	int octave;
	int waveform;
	float gain;
    float noiseLevel;
	int semiTone;
	float root12th;

	// STK  waveform class generator 
	SineWave sineOut;
	BlitSaw sawOut;
	BlitSquare squareOut;
	Noise noise;
	
	// LFO 
	LFO lfo_;
	tinySynthLFO modulateLfo;

};
