/*
==============================================================================
tinySynthOscillator.cpp - Copyright (C) 2016 Aldo Ciaccini

Description:
tinySynthOscillator implements the baseline oscillator belonging to the tinySynth synthesizer.
The oscillator's output is produced as a function of:
	- oscillator parameters: waveform type, frequency, octave and gain
	- LFO effects: vibrato and tremolo effects
	- ADSR modifications: attach, decay, release and sustain
	- Noise level

Three types of waveforms can be generated: Sine, Saw and Square.

The Oscillator, Noise, and partially the LFO (only Sine) waveforms are derived by
STK generator classes:
	- SineWave: this class computes and saves a static sine "table". Output values 
				are generated by using linear interpolation.
	- BlitSaw: this class generates a band-limited sawtooth waveform
	- BlitSquare: this class generates a band-limited square wave signal
	- Noise: it generates random number using the C rand() function

Also ADSR audio modifications are based on the STK library.

Differently, the Saw and Square waveforms of LFO are based on NaiveSaw and 
NaiveSquare wave provided by tinySynthLFO class.
==============================================================================
Copyright:
This module was inspired by the vstSynth project developed 
by Gabriel Olochwoszcz in 2012 under the terms of the GNU Public Lic. v.2.

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
==============================================================================
STK LICENSE:

STK WWW site: http://ccrma.stanford.edu/software/stk/

The Synthesis ToolKit in C++ (STK)
Copyright (c) 1995-2011 Perry R. Cook and Gary P. Scavone

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

Any person wishing to distribute modifications to the Software is
asked to send the modifications to the original developer so that they
can be incorporated into the canonical version.  This is, however, not
a binding provision of this license.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR
ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF
CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
==============================================================================
*/


#include "tinySynthOscillator.h"

//==============================================================================
tinySynthOscillator::tinySynthOscillator()
{
	// Inzialize internal parameters
	frequency = 220;
	octave = 2;
	waveform = 0;
	gain = 0;
	noiseLevel = 0;
	semiTone=0;
	root12th = pow(2.0,1.0/12.0);

	lfo_.Frequency = 0.0f;
	lfo_.Depth = 0.0f;
	lfo_.Destination = -1; // -1 to force the first initialization of lfo_ class variable
	lfo_.Wave = 0;
}


//==============================================================================
tinySynthOscillator::~tinySynthOscillator()
{
}

//==============================================================================
void tinySynthOscillator::setFrequency(float newFrequency)
{
	frequency = newFrequency; // Controlled by MIDI key number + octave fix
}

//==============================================================================
float tinySynthOscillator::getFrequency()
{
	return this->frequency;
}

//==============================================================================
void tinySynthOscillator::setOctave(int newOctave)
{
	this->octave = newOctave; // Controlled by tinySynthEditor::oscXOctaveSlider
}

//==============================================================================
void tinySynthOscillator::setSemiTone(int newSemiTone)
{
	this->semiTone = newSemiTone; // Controlled by tinySynthEditor::oscXOctaveSlider
}
//==============================================================================
int tinySynthOscillator::getOctave()
{
	return this->octave;
}

//==============================================================================
void tinySynthOscillator::setGain(float newGain)
{
	this->gain = newGain; // Controlled by tinySynthEditor::oscXLevelSlider
}

//==============================================================================
float tinySynthOscillator::getGain()
{
	return this->gain;
}

//==============================================================================
void tinySynthOscillator::setWaveform(int newWaveform)
{
	this->waveform = newWaveform; // Controlled by tinySynthEditor::oscXWaveComboBox
}

//==============================================================================
int tinySynthOscillator::getWaveform()
{
	return this->waveform;
}


//==============================================================================
// Generate a single output tick according to the oscillator's current paramenters
StkFloat tinySynthOscillator::tick()
{
	switch (waveform) 
	{
	case 0: 
		return this->getGain() * this->sineOut.tick()*0.18f; //about -16 dB
	case 1:
		return this->getGain() * this->sawOut.tick()*0.18f; //about -16 dB
	case 2:
		return this->getGain() * this->squareOut.tick()*0.18f; //about -16 dB
	default:
		return 0;
	}
}

//==============================================================================

float tinySynthOscillator::singleSample(ADSR* envelope, float noiseGain, LFO* lfo)
{
	// Generate a single sample according to the formula: SAMPLE = ADSR * (NOISE + OSCILLATOR) * TREMOLO
	
	//****** START <LFO handling> ******//
	// check if lfo values differ from the ones of internal lfo_
	// lfo->Destination: 0 = LFO not assigned, 1 = Vibrato effect, 2 = Tremolo effect
	// lfo->Wave: 0 = sine, 1 = Saw, 2 = Square
	if ( (lfo->Frequency != lfo_.Frequency)		|| (lfo->Depth != lfo_.Depth) || 
		 (lfo->Destination != lfo_.Destination) || (lfo->Wave != lfo_.Wave))
	{
		if (lfo->Destination == 0)
		{
			lfo_.Frequency = 0.0f; 			lfo_.Depth = 0.0f;
			lfo_.Destination = 0; 			lfo_.Wave = 0;
		}
		else
		{
			lfo_.Frequency = lfo->Frequency; 			lfo_.Depth = lfo->Depth;
			lfo_.Destination = lfo->Destination; 		lfo_.Wave = lfo->Wave;
		}
		modulateLfo.setVibratoRate(lfo_.Frequency);
		modulateLfo.setVibratoGain(lfo_.Depth);
		modulateLfo.setWaveform(lfo_.Wave);
	}
	
	// calculate the vibratoTick and tremoloTick values relatives  to  lfo: 
	float vibratoTick = 0.0f , tremoloTick = 0.0f;
	if (lfo_.Destination == 1) // Vibrato
		vibratoTick = modulateLfo.tick();
	if (lfo_.Destination == 2) // Tremolo
		tremoloTick = modulateLfo.tick()/10;
	//****** END <LFO handling> ******//

	// calulate the Noise level contribute
	if (noiseGain <= 0.01)
		noiseLevel = 0;
	else
		noiseLevel = 0.01 * noiseGain;

	// Oscillator's Octave handling
	float multOctave = 1.0f;
	switch(this->octave) 
	{
		case 0: // -2
			multOctave = 0.25f; 
			break; 
		case 1: // -1
			multOctave = 0.5f;  
			break; 
		case 2: // 0
			multOctave = 1.0f; 
			break; 
		case 3: // +1
			multOctave = 2.0f; 
			break; 
		case 4: // +2
			multOctave = 4.0f;  
			break; 
	}
	
	// change oscillator's frequency according to lfo vibratoTick
	switch (waveform)
	{
		case 0: //Sine
			sineOut.setFrequency(multOctave * pow(root12th, semiTone)  * (frequency + vibratoTick));	
			break;
		case 1: //Saw
			sawOut.setFrequency(multOctave * pow(root12th, semiTone)   * (frequency + vibratoTick));				
				break;
		case 2: //Square
			squareOut.setFrequency(multOctave * pow(root12th, semiTone)  * (frequency + vibratoTick));				
			break;
		default:
			break;
	}
	
	// calculate the ADSR corresponding tick
	float envN = envelope->tick();
	
	// return the output sample 
	// the tremoloTick contribute is normalized between 0.of and 1.0f
	return (float) (envN * (noiseLevel * noise.tick() + this->tick())) * (0.5f*(1.0f+tremoloTick)); 
}
